name: Stock Analysis Pipeline

on:
  schedule:
    # Run every 30 minutes
    - cron: '*/30 * * * *'
    # Also run at market open and close (EST)
    - cron: '30 9 * * 1-5'   # 9:30 AM EST (market open)
    - cron: '0 16 * * 1-5'    # 4:00 PM EST (market close)
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read
  actions: write

concurrency:
  group: stock-analysis-pipeline
  cancel-in-progress: true

jobs:
  pipeline:
    runs-on: ubuntu-latest

    env:
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_HOST: localhost
      DB_PORT: 5432
      POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -d ${{ secrets.DB_NAME }} -U ${{ secrets.DB_USER }}" 
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Ensure PYTHONPATH includes workspace
        run: |
          echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: Wait for Postgres to accept connections
        run: |
          echo "Waiting for Postgres at $DB_HOST:$DB_PORT..."
          for i in {1..30}; do
            if (echo > /dev/tcp/$DB_HOST/$DB_PORT) >/dev/null 2>&1; then
              echo "Postgres is listening on $DB_HOST:$DB_PORT"
              exit 0
            fi
            echo "Postgres not ready yet ($i/30). Sleeping 2s..."
            sleep 2
          done
          echo "Timed out waiting for Postgres to be reachable at $DB_HOST:$DB_PORT"
          exit 1

      - name: Initialize database
        run: |
          python -m scripts.init_db

      - name: Seed stocks (if needed)
        run: |
          set -o pipefail
          python -m scripts.seed_stocks || (echo "Seed script exited non-zero; continuing job" && true)

      - name: Run pipeline
        run: |
          python -m scripts.run_pipeline 100  # Process 100 stocks per run

      - name: Upload exports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: analysis-exports
          path: exports/
          retention-days: 7
